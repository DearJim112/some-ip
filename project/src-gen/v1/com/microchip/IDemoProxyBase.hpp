/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v201808092327.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/*
 * description: 
 * Interface to be implemented by server
 */
#ifndef V1_COM_MICROCHIP_I_Demo_PROXY_BASE_HPP_
#define V1_COM_MICROCHIP_I_Demo_PROXY_BASE_HPP_

#include <v1/com/microchip/IDemo.hpp>



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <cstdint>
#include <vector>

#include <CommonAPI/Attribute.hpp>
#include <CommonAPI/Event.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace microchip {

class IDemoProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::ObservableAttribute< bool> AttribBoolAttribute;
    typedef CommonAPI::Event<
        std::string
    > StatusEvent;

    typedef std::function<void(const CommonAPI::CallStatus&, const IDemo::GenericErrors&, const bool&)> GetAttribAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const IDemo::GenericErrors&)> SetAttribAsyncCallback;

    virtual AttribBoolAttribute& getAttribBoolAttribute() = 0;

    /*
     * description: 
     * Broadcast for notifing client
     */
    virtual StatusEvent& getStatusEvent() = 0;

    /*
     * description: 
     * Retrieve Attrib
     */
    virtual void GetAttrib(CommonAPI::CallStatus &_internalCallStatus, IDemo::GenericErrors &_error, bool &_data, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> GetAttribAsync(GetAttribAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    /*
     * description: 
     * Set Attrib
     */
    virtual void SetAttrib(const bool &_value, CommonAPI::CallStatus &_internalCallStatus, IDemo::GenericErrors &_error, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> SetAttribAsync(const bool &_value, SetAttribAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
};

} // namespace microchip
} // namespace com
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_MICROCHIP_I_Demo_PROXY_BASE_HPP_
