/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v201808092327.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/*
 * description: 
 * Interface to be implemented by server
 */
#ifndef V1_COM_MICROCHIP_I_Demo_PROXY_HPP_
#define V1_COM_MICROCHIP_I_Demo_PROXY_HPP_

#include <v1/com/microchip/IDemoProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/AttributeExtension.hpp>
#include <CommonAPI/Factory.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace microchip {

template <typename ... _AttributeExtensions>
class IDemoProxy
    : virtual public IDemo,
      virtual public IDemoProxyBase,
      virtual public _AttributeExtensions... {
public:
    IDemoProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~IDemoProxy();

    typedef IDemo InterfaceType;


    /**
     * Returns the wrapper class that provides access to the attribute attribBool.
     */
    virtual AttribBoolAttribute& getAttribBoolAttribute() {
        return delegate_->getAttribBoolAttribute();
    }

    /*
     * description: 
     * Broadcast for notifing client
     */
    /**
     * Returns the wrapper class that provides access to the broadcast Status.
     */
    virtual StatusEvent& getStatusEvent() {
        return delegate_->getStatusEvent();
    }

    /**
     * description: 
     * Retrieve Attrib
     * Calls GetAttrib with synchronous semantics.
     *
    * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void GetAttrib(CommonAPI::CallStatus &_internalCallStatus, IDemo::GenericErrors &_error, bool &_data, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls GetAttrib with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> GetAttribAsync(GetAttribAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: 
     * Set Attrib
     * Calls SetAttrib with synchronous semantics.
     *
    * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void SetAttrib(const bool &_value, CommonAPI::CallStatus &_internalCallStatus, IDemo::GenericErrors &_error, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls SetAttrib with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> SetAttribAsync(const bool &_value, SetAttribAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

 private:
    std::shared_ptr< IDemoProxyBase> delegate_;
};

typedef IDemoProxy<> IDemoProxyDefault;

namespace IDemoExtensions {
    template <template <typename > class _ExtensionType>
    class AttribBoolAttributeExtension {
     public:
        typedef _ExtensionType< IDemoProxyBase::AttribBoolAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< IDemoProxyBase::AttribBoolAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        AttribBoolAttributeExtension(IDemoProxyBase& proxy): attributeExtension_(proxy.getAttribBoolAttribute()) {
        }
    
        inline extension_type& getAttribBoolAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

} // namespace IDemoExtensions

//
// IDemoProxy Implementation
//
template <typename ... _AttributeExtensions>
IDemoProxy<_AttributeExtensions...>::IDemoProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast< IDemoProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast< IDemoProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
IDemoProxy<_AttributeExtensions...>::~IDemoProxy() {
}

/*
 * description: 
 * Retrieve Attrib
 */
template <typename ... _AttributeExtensions>
void IDemoProxy<_AttributeExtensions...>::GetAttrib(CommonAPI::CallStatus &_internalCallStatus, IDemo::GenericErrors &_error, bool &_data, const CommonAPI::CallInfo *_info) {
    delegate_->GetAttrib(_internalCallStatus, _error, _data, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> IDemoProxy<_AttributeExtensions...>::GetAttribAsync(GetAttribAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->GetAttribAsync(_callback, _info);
}
/*
 * description: 
 * Set Attrib
 */
template <typename ... _AttributeExtensions>
void IDemoProxy<_AttributeExtensions...>::SetAttrib(const bool &_value, CommonAPI::CallStatus &_internalCallStatus, IDemo::GenericErrors &_error, const CommonAPI::CallInfo *_info) {
    delegate_->SetAttrib(_value, _internalCallStatus, _error, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> IDemoProxy<_AttributeExtensions...>::SetAttribAsync(const bool &_value, SetAttribAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->SetAttribAsync(_value, _callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &IDemoProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool IDemoProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool IDemoProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& IDemoProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& IDemoProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


} // namespace microchip
} // namespace com
} // namespace v1

namespace CommonAPI {
template<template<typename > class _AttributeExtension>
struct DefaultAttributeProxyHelper< ::v1::com::microchip::IDemoProxy,
    _AttributeExtension> {
    typedef typename ::v1::com::microchip::IDemoProxy<
            ::v1::com::microchip::IDemoExtensions::AttribBoolAttributeExtension<_AttributeExtension>
    > class_t;
};
}


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_MICROCHIP_I_Demo_PROXY_HPP_
