/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.someip 3.1.12.v201801251434.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/*
 * description: 
 * Interface to be implemented by server
 */
#ifndef V1_COM_MICROCHIP_I_DEMO_SOMEIP_STUB_ADAPTER_HPP_
#define V1_COM_MICROCHIP_I_DEMO_SOMEIP_STUB_ADAPTER_HPP_

#include <v1/com/microchip/IDemoStub.hpp>
#include <v1/com/microchip/IDemoSomeIPDeployment.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>
#include <CommonAPI/SomeIP/StubAdapterHelper.hpp>
#include <CommonAPI/SomeIP/StubAdapter.hpp>
#include <CommonAPI/SomeIP/Factory.hpp>
#include <CommonAPI/SomeIP/Types.hpp>
#include <CommonAPI/SomeIP/Constants.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace microchip {

template <typename _Stub = ::v1::com::microchip::IDemoStub, typename... _Stubs>
class IDemoSomeIPStubAdapterInternal
    : public virtual IDemoStubAdapter,
      public CommonAPI::SomeIP::StubAdapterHelper< _Stub, _Stubs...>
{
public:
    typedef CommonAPI::SomeIP::StubAdapterHelper< _Stub, _Stubs...> IDemoSomeIPStubAdapterHelper;

    ~IDemoSomeIPStubAdapterInternal() {
        deactivateManagedInstances();
        IDemoSomeIPStubAdapterHelper::deinit();
    }

    void fireAttribBoolAttributeChanged(const bool& value);

    /*
     * description: 
     * Broadcast for notifing client
     */
    void fireStatusEvent(const std::string& Message);

    void deactivateManagedInstances() {
    }

    static CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::com::microchip::IDemoStub,
        CommonAPI::Version
    > getIDemoInterfaceVersionStubDispatcher;

    static CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::com::microchip::IDemoStub,
        bool
    > getAttribBoolAttributeStubDispatcher;
    static CommonAPI::SomeIP::SetObservableAttributeStubDispatcher<
        ::v1::com::microchip::IDemoStub,
        bool
    > setAttribBoolAttributeStubDispatcher;

    /*
     * description: 
     * Retrieve Attrib
     */
    
    static CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v1::com::microchip::IDemoStub,
        std::tuple< >,
        std::tuple< IDemo::GenericErrors, bool>,
        std::tuple< >,
        std::tuple< ::v1::com::microchip::IDemo_::GenericErrorsDeployment_t, CommonAPI::EmptyDeployment>
    > getAttribStubDispatcher;
    /*
     * description: 
     * Set Attrib
     */
    
    static CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v1::com::microchip::IDemoStub,
        std::tuple< bool>,
        std::tuple< IDemo::GenericErrors>,
        std::tuple< CommonAPI::EmptyDeployment>,
        std::tuple< ::v1::com::microchip::IDemo_::GenericErrorsDeployment_t>
    > setAttribStubDispatcher;

    IDemoSomeIPStubAdapterInternal(
        const CommonAPI::SomeIP::Address &_address,
        const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub):
        CommonAPI::SomeIP::StubAdapter(_address, _connection),
        IDemoSomeIPStubAdapterHelper(
            _address,
            _connection,
            std::dynamic_pointer_cast< IDemoStub>(_stub))
    {

                IDemoSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x1e) }, &getAttribBoolAttributeStubDispatcher );
                IDemoSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x1f) }, &setAttribBoolAttributeStubDispatcher );
        
                /*
                 * description: 
                 * Retrieve Attrib
                 */
                IDemoSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x5a) }, &getAttribStubDispatcher );
                /*
                 * description: 
                 * Set Attrib
                 */
                IDemoSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x5b) }, &setAttribStubDispatcher );

        std::shared_ptr<CommonAPI::SomeIP::ClientId> clientId = std::make_shared<CommonAPI::SomeIP::ClientId>(0xFFFF);

        // Provided events/fields
        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(0x80e8));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x80e8), itsEventGroups, false);
        }
        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(CommonAPI::SomeIP::eventgroup_id_t(0x1b58)));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x20), itsEventGroups, true);
            fireAttribBoolAttributeChanged(std::dynamic_pointer_cast< ::v1::com::microchip::IDemoStub>(_stub)->getAttribBoolAttribute(clientId));
        }

    }

private:
};

template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::GetAttributeStubDispatcher<
    ::v1::com::microchip::IDemoStub,
    CommonAPI::Version
    > IDemoSomeIPStubAdapterInternal<_Stub, _Stubs...>::getIDemoInterfaceVersionStubDispatcher(&IDemoStub::lockInterfaceVersionAttribute, &IDemoStub::getInterfaceVersion, false);

template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::GetAttributeStubDispatcher<
    ::v1::com::microchip::IDemoStub,
    bool
> IDemoSomeIPStubAdapterInternal<_Stub, _Stubs...>::getAttribBoolAttributeStubDispatcher(
    &IDemoStub::lockAttribBoolAttribute,
    &IDemoStub::getAttribBoolAttribute, false);
template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::SetObservableAttributeStubDispatcher<
    ::v1::com::microchip::IDemoStub,
    bool
> IDemoSomeIPStubAdapterInternal<_Stub, _Stubs...>::setAttribBoolAttributeStubDispatcher(
    &IDemoStub::lockAttribBoolAttribute,
    &IDemoStub::getAttribBoolAttribute,
    &IDemoStubRemoteEvent::onRemoteSetAttribBoolAttribute,
    &IDemoStubRemoteEvent::onRemoteAttribBoolAttributeChanged,
    &IDemoStubAdapter::fireAttribBoolAttributeChanged,
    false
);

/*
 * description: 
 * Retrieve Attrib
 */
template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
    ::v1::com::microchip::IDemoStub,
    std::tuple< >,
    std::tuple< IDemo::GenericErrors, bool>,
    std::tuple< >,
    std::tuple< ::v1::com::microchip::IDemo_::GenericErrorsDeployment_t, CommonAPI::EmptyDeployment>
> IDemoSomeIPStubAdapterInternal<_Stub, _Stubs...>::getAttribStubDispatcher(
    &IDemoStub::GetAttrib,
    false,
    std::make_tuple(),
    std::make_tuple(static_cast< ::v1::com::microchip::IDemo_::GenericErrorsDeployment_t * >(nullptr), static_cast< CommonAPI::EmptyDeployment* >(nullptr)));

/*
 * description: 
 * Set Attrib
 */
template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
    ::v1::com::microchip::IDemoStub,
    std::tuple< bool>,
    std::tuple< IDemo::GenericErrors>,
    std::tuple< CommonAPI::EmptyDeployment>,
    std::tuple< ::v1::com::microchip::IDemo_::GenericErrorsDeployment_t>
> IDemoSomeIPStubAdapterInternal<_Stub, _Stubs...>::setAttribStubDispatcher(
    &IDemoStub::SetAttrib,
    false,
    std::make_tuple(static_cast< CommonAPI::EmptyDeployment* >(nullptr)),
    std::make_tuple(static_cast< ::v1::com::microchip::IDemo_::GenericErrorsDeployment_t * >(nullptr)));

template <typename _Stub, typename... _Stubs>
void IDemoSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireAttribBoolAttributeChanged(const bool& value) {
    CommonAPI::SomeIP::StubEventHelper<
        CommonAPI::SomeIP::SerializableArguments<
            bool
            >
    >::sendEvent(
        *this,
        CommonAPI::SomeIP::event_id_t(0x20),
        false,
        value
    );
}

/*
 * description: 
 * Broadcast for notifing client
 */
template <typename _Stub, typename... _Stubs>
void IDemoSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireStatusEvent(const std::string& _Message) {
    CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deployed_Message(_Message, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<CommonAPI::SomeIP::SerializableArguments<  CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment > 
    >>
        ::sendEvent(
            *this,
            CommonAPI::SomeIP::event_id_t(0x80e8),
            false,
             deployed_Message 
    );
}

template <typename _Stub = ::v1::com::microchip::IDemoStub, typename... _Stubs>
class IDemoSomeIPStubAdapter
    : public IDemoSomeIPStubAdapterInternal<_Stub, _Stubs...>,
      public std::enable_shared_from_this< IDemoSomeIPStubAdapter<_Stub, _Stubs...>> {
public:
    IDemoSomeIPStubAdapter(const CommonAPI::SomeIP::Address &_address,
                                            const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
                                            const std::shared_ptr<CommonAPI::StubBase> &_stub)
        : CommonAPI::SomeIP::StubAdapter(_address, _connection),
          IDemoSomeIPStubAdapterInternal<_Stub, _Stubs...>(_address, _connection, _stub) {
    }
};

} // namespace microchip
} // namespace com
} // namespace v1

#endif // V1_COM_MICROCHIP_I_Demo_SOMEIP_STUB_ADAPTER_HPP_
