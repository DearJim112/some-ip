/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v201808092327.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/*
 * description: 
 * Typecollection
 */
#ifndef V1_COM_MICROCHIP_Custom_Types_HPP_
#define V1_COM_MICROCHIP_Custom_Types_HPP_



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace microchip {

struct CustomTypes {
    /*
     * description: 
     */
    struct attribStruct : CommonAPI::Struct< uint8_t, uint8_t, uint16_t> {
    
        attribStruct()
        {
            std::get< 0>(values_) = 0u;
            std::get< 1>(values_) = 0u;
            std::get< 2>(values_) = 0u;
        }
        attribStruct(const uint8_t &_attribX, const uint8_t &_attribY, const uint16_t &_attribZ)
        {
            std::get< 0>(values_) = _attribX;
            std::get< 1>(values_) = _attribY;
            std::get< 2>(values_) = _attribZ;
        }
        inline const uint8_t &getAttribX() const { return std::get< 0>(values_); }
        inline void setAttribX(const uint8_t &_value) { std::get< 0>(values_) = _value; }
        inline const uint8_t &getAttribY() const { return std::get< 1>(values_); }
        inline void setAttribY(const uint8_t &_value) { std::get< 1>(values_) = _value; }
        inline const uint16_t &getAttribZ() const { return std::get< 2>(values_); }
        inline void setAttribZ(const uint16_t &_value) { std::get< 2>(values_) = _value; }
        inline bool operator==(const attribStruct& _other) const {
        return (getAttribX() == _other.getAttribX() && getAttribY() == _other.getAttribY() && getAttribZ() == _other.getAttribZ());
        }
        inline bool operator!=(const attribStruct &_other) const {
            return !((*this) == _other);
        }
    
    };



static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "com.microchip.CustomTypes";
    return typeCollectionName;
}

inline CommonAPI::Version getTypeCollectionVersion() {
    return CommonAPI::Version(1, 0);
}

}; // struct CustomTypes

} // namespace microchip
} // namespace com
} // namespace v1

namespace CommonAPI {
}


namespace std {
}


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_MICROCHIP_Custom_Types_HPP_
