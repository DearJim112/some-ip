/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v201808092327.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/*
 * description: 
 * Interface to be implemented by server
 */
#ifndef V1_COM_MICROCHIP_I_Demo_STUB_HPP_
#define V1_COM_MICROCHIP_I_Demo_STUB_HPP_

#include <functional>
#include <sstream>




#include <v1/com/microchip/IDemo.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <cstdint>
#include <unordered_set>
#include <vector>

#include <mutex>

#include <CommonAPI/Stub.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace com {
namespace microchip {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service IDemo. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class IDemoStubAdapter
    : public virtual CommonAPI::StubAdapter,
      public virtual IDemo {
 public:
    ///Notifies all remote listeners about a change of value of the attribute attribBool.
    virtual void fireAttribBoolAttributeChanged(const bool& attribBool) = 0;

    /**
    * Sends a broadcast event for Status. Should not be called directly.
    * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
    */
    virtual void fireStatusEvent(const std::string &_Message) = 0;


    virtual void deactivateManagedInstances() = 0;

    void lockAttribBoolAttribute(bool _lockAccess) {
        if (_lockAccess) {
            attribBoolMutex_.lock();
        } else {
            attribBoolMutex_.unlock();
        }
    }

protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */

    std::recursive_mutex attribBoolMutex_;
};

/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for IDemo.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class IDemoStubRemoteEvent
{
public:
    virtual ~IDemoStubRemoteEvent() { }

    /// Verification callback for remote set requests on the attribute attribBool
    virtual bool onRemoteSetAttribBoolAttribute(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value) = 0;
    /// Action callback for remote set requests on the attribute attribBool
    virtual void onRemoteAttribBoolAttributeChanged() = 0;
};

/**
 * Defines the interface that must be implemented by any class that should provide
 * the service IDemo to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class IDemoStub
    : public virtual CommonAPI::Stub<IDemoStubAdapter, IDemoStubRemoteEvent>
{
public:
    typedef std::function<void (IDemo::GenericErrors _error, bool _data)>GetAttribReply_t;
    typedef std::function<void (IDemo::GenericErrors _error)>SetAttribReply_t;

    virtual ~IDemoStub() {}
    virtual const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId) = 0;
    void lockInterfaceVersionAttribute(bool _lockAccess) { static_cast<void>(_lockAccess); }

    /// Provides getter access to the attribute attribBool
    virtual const bool &getAttribBoolAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireAttribBoolAttributeChanged(bool _value) {
    auto stubAdapter = CommonAPI::Stub<IDemoStubAdapter, IDemoStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireAttribBoolAttributeChanged(_value);
    }
    void lockAttribBoolAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<IDemoStubAdapter, IDemoStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockAttribBoolAttribute(_lockAccess);
    }

    /*
     * description: 
     * Retrieve Attrib
     */
    /// This is the method that will be called on remote calls on the method GetAttrib.
    virtual void GetAttrib(const std::shared_ptr<CommonAPI::ClientId> _client, GetAttribReply_t _reply) = 0;
    /*
     * description: 
     * Set Attrib
     */
    /// This is the method that will be called on remote calls on the method SetAttrib.
    virtual void SetAttrib(const std::shared_ptr<CommonAPI::ClientId> _client, bool _value, SetAttribReply_t _reply) = 0;
    /*
     * description: 
     * Broadcast for notifing client
     */
    /// Sends a broadcast event for Status.
    virtual void fireStatusEvent(const std::string &_Message) {
        auto stubAdapter = CommonAPI::Stub<IDemoStubAdapter, IDemoStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireStatusEvent(_Message);
    }

    
    using CommonAPI::Stub<IDemoStubAdapter, IDemoStubRemoteEvent>::initStubAdapter;
    typedef CommonAPI::Stub<IDemoStubAdapter, IDemoStubRemoteEvent>::StubAdapterType StubAdapterType;
    typedef CommonAPI::Stub<IDemoStubAdapter, IDemoStubRemoteEvent>::RemoteEventHandlerType RemoteEventHandlerType;
    typedef IDemoStubRemoteEvent RemoteEventType;
    typedef IDemo StubInterface;
};

} // namespace microchip
} // namespace com
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_MICROCHIP_I_Demo_STUB_HPP_
